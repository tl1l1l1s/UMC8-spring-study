name: CI/CD Pipeline
on:
  push:
    branches: [ develop ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Make application.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: umc7thServer
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: umc7thServer
          path: ./
      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # SSH 키 설정 및 디버깅
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # 키 파일 확인
          echo "Key file created:"
          ls -la private_key.pem
          echo "Key file first line:"
          head -n 1 private_key.pem
          
          # SSH 연결 테스트
          echo "Testing SSH connection..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=30 \
            $EC2_USERNAME@$EC2_HOST "echo 'SSH connection successful'"
          
          # JAR 파일 찾기 (현재 디렉토리에서)
          jar_file=$(find . -name '*.jar' ! -name '*plain.jar' | head -n 1)
          echo "Found JAR file: $jar_file"
          
          # 파일이 존재하는지 확인
          if [ ! -f "$jar_file" ]; then
            echo "JAR file not found!"
            exit 1
          fi
          
          # EC2에 JAR 파일 업로드
          scp -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=30 \
            "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/umc7thServer.jar
          
          # 애플리케이션 재시작
          ssh -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=30 \
            $EC2_USERNAME@$EC2_HOST "
            # 기존 애플리케이션 종료 (에러 무시)
            echo 'Checking for existing application...'
            if pgrep -f 'umc7thServer.jar' > /dev/null 2>&1; then
              echo 'Stopping existing application...'
              pkill -f 'umc7thServer.jar' || true
              sleep 5
              pkill -9 -f 'umc7thServer.jar' 2>/dev/null || true
            else
              echo 'No existing application found'
            fi
          
            # 새 애플리케이션 실행
            echo 'Starting new application...'
            nohup java -jar /home/$EC2_USERNAME/umc7thServer.jar > app.log 2>&1 &
          
            # 실행 확인
            sleep 5
            if pgrep -f 'umc7thServer.jar' > /dev/null 2>&1; then
              echo 'Application started successfully'
            else
              echo 'Application may be starting... Check logs with: tail -f app.log'
            fi
          "
          
          # 민감한 정보 삭제
          rm -f private_key.pem